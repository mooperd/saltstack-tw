; Enable xdebug extension module
zend_extension=xdebug.so

[xdebug]
; see http://xdebug.org/docs/all_settings

; If this setting is 1, Xdebug will color var_dumps and stack traces output when in CLI mode and when the output is a
; tty.
; If the setting is 2, then Xdebug will always color var_dumps and stack trace, no matter whether it's connected to a
; tty. In this case, you might end up seeing escape codes.
xdebug.cli_color=1

; This setting, defaulting to 0, controls whether Xdebug should add variable assignments to function traces.
xdebug.collect_assignments=1

; This setting, defaulting to 1, controls whether Xdebug should write the filename
; used in include(), include_once(), require() or require_once() to the trace files.
;xdebug.collect_includes=1

; This setting controls whether Xdebug should collect the parameters passed to functions when a function call is
; recorded in either the function trace or the stack trace.
; 
; For each of the values a different amount of information is shown.
; 0 = None
; 1 = Type and number of elements (f.e. string(6), array(8))
; 2 = Type and number of elements, with a tool tip for the full information (HTML)
; 3 = Full variable contents (with limits respected as set by
;     xdebug.var_display_max_children, xdebug.var_display_max_data and xdebug.var_display_max_depth
; 4 = Full variable contents and variable name
; 5 = PHP serialized variable contents, without the name
;xdebug.collect_params=0

; This setting controls whether Xdebug should write the return value of function calls to trace files.
;xdebug.collect_return=0

; This setting tells Xdebug to gather information about which variables are used in a certain scope. This analysis can
; be quite slow as Xdebug has to reverse engineer PHP's opcode arrays. This setting will not record which values the
; different variables have, for that use xdebug.collect_params. This setting needs to be enabled only if you wish to
; use xdebug_get_declared_vars().
;xdebug.collect_vars=0

; If this setting is set to 0, then Xdebug will not set-up internal structures to allow code coverage.
; This speeds up Xdebug quite a bit, but of course, Code Coverage Analysis won't work.
;xdebug.coverage_enable=1

; If enabled, stacktraces will be shown by default on an error event. You can disable showing stacktraces from your
; code with xdebug_disable().
;xdebug.default_enable=1

; These settings control which data from the superglobals is shown when an error situation occurs.
; Each setting can consist of a comma seperated list of variables from this superglobal to dump, or * for all of them.
; Make sure you do not add spaces in this setting.
;xdebug.dump.COOKIE  = *
;xdebug.dump.FILES   = *
;xdebug.dump.GET     = *
;xdebug.dump.POST    = *
;xdebug.dump.REQUEST = *
;xdebug.dump.SERVER  = *
;xdebug.dump.SESSION = *

; Controls whether the values of the superglobals as defined by the xdebug.dump.* settings should be shown or not.
;xdebug.dump_globals=1

; Controls whether the values of the superglobals should be dumped on all error situations (set to 0)
; or only on the first (set to 1).
;xdebug.dump_once=1

; Dump undefined values from the superglobals.
;xdebug.dump_undefined=0

; Controls whether Xdebug should enforce 'extended_info' mode for the PHP parser; this allows Xdebug to do file/line
; breakpoints with the remote debugger. When tracing or profiling scripts you generally want to turn off this option as
; PHP's generated oparrays will increase with about a third of the size slowing down your scripts.
;xdebug.extended_info=1

; This setting determines the format of the links that are made in the display of stack traces where file names are
; used. This allows IDEs to set up a link-protocol that makes it possible to go directly to a line and file by clicking
; on the filenames that Xdebug shows in stack traces. An example format might look like: myide://%f@%l
; 
; Possible format specifiers are:
; %f = the filename
; %l = the line number
;xdebug.file_link_format=

; If enabled errors will always be displayed, no matter what the setting of PHP's display_errors is.
;xdebug.force_display_errors=0

; This setting is a bitmask, like error_reporting. This bitmask will be logically ORed with the bitmask represented by
; error_reporting to dermine which errors should be displayed.
;xdebug.force_error_reporting=0

; This setting allows you to configure a mask that determines whether, and which, notices and/or warnings get converted
; to errors. You can configure notices and warnings that are generated by PHP, and notices and warnings that you
; generate yourself (by means of trigger_error()).
;xdebug.halt_level=0

; Controls which IDE Key Xdebug should pass on to the DBGp debugger handler. The default is based on environment
; settings. First the environment setting DBGP_IDEKEY is consulted, then USER and as last USERNAME. The default is set
; to the first environment variable that is found. If none could be found the setting has as default ''. If this
; setting is set, it always overrides the environment variables.
;xdebug.idekey=

; This is the base url for the links from the function traces and error message to the manual pages of the function
; from the message. It is advisable to set this setting to use the closest mirror.
;xdebug.manual_url=http://www.php.net

; Controls the protection mechanism for infinite recursion protection. The value of this setting is the maximum level
; of nested functions that are allowed before the script will be aborted.
;xdebug.max_nesting_level=256

; By default Xdebug overloads var_dump() with its own improved version for displaying variables when the html_errors
; php.ini setting is set to 1. In case you do not want that, you can set this setting to 0, but check first if it's not
; smarter to turn off html_errors.
; 
; You can also use 2 as value for this setting. Besides formatting the var_dump() output nicely, it will also add
; filename and line number to the output. The xdebug.file_link_format setting is also respected.
;xdebug.overload_var_dump=1
xdebug.overload_var_dump=0

; Enables Xdebug's profiler which creates files in the profile output directory. Those files can be read by KCacheGrind
; to visualize your data. If you want to selectively enable the profiler,
; please set xdebug.profiler_enable_trigger to 1 instead of using this setting.
;xdebug.profiler_enable=0

; When this setting is set to 1, you can trigger the generation of profiler files by using the XDEBUG_PROFILE GET/POST
; parameter, or set a cookie with the name XDEBUG_PROFILE. This will then write the profiler data to defined directory.
; In order to prevent the profiler to generate profile files for each request, you need to set xdebug.profiler_enable
; to 0. Access to the trigger itself can be configured through xdebug.profiler_enable_trigger_value.
;xdebug.profiler_enable_trigger=0

; This setting can be used to restrict who can make use of the XDEBUG_PROFILE functionality as outlined in
; xdebug.profiler_enable_trigger. When changed from its default value of an empty string, the value of the cookie, GET
; or POST argument needs to match the shared secret set with this setting in order for the profiler to start.
;xdebug.profiler_enable_trigger_value=

; When this setting is set to 1, profiler files will not be overwritten when a new request would map to the same file
; (depnding on the xdebug.profiler_output_name setting. Instead the file will be appended to with the new profile.
;xdebug.profiler_append=0

; The directory where the profiler output will be written to, make sure that the user who the PHP will be running as
; has write permissions to that directory. This setting can not be set in your script with ini_set().
;xdebug.profiler_output_dir=/tmp

; This setting determines the name of the file that is used to dump traces into. The setting specifies the format with
; format specifiers. There are several format specifiers that can be used to format the file name.
; 
; Possible format specifiers are:
; %c  = crc32 of working directory
; %p  = pid
; %r  = random number
; %s  = script name
; %t  = timestamp
; %u  = timestamp (microseconds)
; %H  = $_SERVER['HTTP_HOST']
; %R  = $_SERVER['REQUEST_URI']
; %U  = $_SERVER['UNIQUE_ID']
; %S  = session_id (from $_COOKIE if set)
; %%  = literal %
;xdebug.profiler_output_name=cachegrind.out.%p

; Normally you need to use a specific HTTP GET/POST variable to start remote debugging. When this setting is enabled,
; Xdebug will always attempt to start a remote debugging session and try to connect to a client, even if the
; GET/POST/COOKIE variable was not present.
;xdebug.remote_autostart=0

; If enabled, the xdebug.remote_host setting is ignored and Xdebug will try to connect to the client that made the HTTP
; request. It checks the $_SERVER['REMOTE_ADDR'] variable to find out which IP address to use. Please note that there
; is no filter available, and anybody who can connect to the webserver will then be able to start a debugging session,
; even if their address does not match xdebug.remote_host.
;xdebug.remote_connect_back=0

; This setting can be used to increase (or decrease) the time that the remote debugging session stays alive via the
; session cookie.
;xdebug.remote_cookie_expire_time=3600

; This switch controls whether Xdebug should try to contact a debug client which is listening on the host and port as
; set with the settings xdebug.remote_host and xdebug.remote_port. If a connection can not be established the script
; will just continue as if this setting was 0.
;xdebug.remote_enable=0

; Selects the host where the debug client is running, you can either use a host name or an IP address. This setting is
; ignored if xdebug.remote_connect_back is enabled.
;xdebug.remote_host=localhost

; If set to a value, it is used as filename to a file to which all remote debugger communications are logged. The file
; is always opened in append-mode, and will therefore not be overwritten by default. There is no concurrency protection
; available. The format of the file looks something like:
; 
; Log opened at 2007-05-27 14:28:15
; -> <init xmlns="urn:debugger_protocol_v1" xmlns:xdebug="http://xdebug.org/dbgp/x ... ight></init>
; <- step_into -i 1
; -> <response xmlns="urn:debugger_protocol_v1" xmlns:xdebug="http://xdebug.org/db ... ></response>
;xdebug.remote_log=


; Selects when a debug connection is initiated. This setting can have two different values:
; req = Xdebug will try to connect to the debug client as soon as the script starts.
; jit = Xdebug will only try to connect to the debug client as soon as an error condition occurs.
;xdebug.remote_mode=req

; The port to which Xdebug tries to connect on the remote host. Port 9000 is the default for both the client and the
; bundled debugclient. As many clients use this port number, it is best to leave this setting unchanged.
;xdebug.remote_port=9000

; If this setting is 1, then Xdebug will disable the @ (shut-up) operator so that notices, warnings and errors are no
; longer hidden.
;xdebug.scream=0

; If enabled, Xdebug will show a stack trace whenever an exception is raised even if this exception is actually caught.
;xdebug.show_exception_trace=0

; When this setting is set to something != 0 Xdebug's generated stack dumps in error situations will also show all
; variables in the top-most scope. Beware that this might generate a lot of information.
;xdebug.show_local_vars=0

; When this setting is set to something != 0 Xdebug's human-readable generated trace files will show the difference in
; memory usage between function calls. If Xdebug is configured to generate computer-readable trace files then they will
; always show this information.
;xdebug.show_mem_delta=0

; When this setting is set to on, the tracing of function calls will be enabled just before the script is run.
; This makes it possible to trace code in the auto_prepend_file.
;xdebug.auto_trace=0

; When this setting is set to 1, you can trigger the generation of trace files by using the XDEBUG_TRACE GET/POST
; parameter, or set a cookie with the name XDEBUG_TRACE. This will then write the trace data to defined directory. In
; order to prevent Xdebug to generate trace files for each request, you need to set xdebug.auto_trace to 0. Access to
; the trigger itself can be configured through xdebug.trace_enable_trigger_value.
;xdebug.trace_enable_trigger=0

; This setting can be used to restrict who can make use of the XDEBUG_TRACE functionality as outlined in
; xdebug.trace_enable_trigger. When changed from its default value of an empty string, the value of the cookie, GET or
; POST argument needs to match the shared secret set with this setting in order for the trace file to be generated.
;xdebug.trace_enable_trigger_value=

; The format of the trace file.
; 0	= Shows a human readable indented trace file with: time index, memory usage, memory delta (if enabled), level,
;     function name, function parameters (if enabled), filename and line number.
; 1 = Writes a computer readable format which has two different records. There are different records for entering a
;     stack frame, and leaving a stack frame. The table below lists the fields in each type of record. Fields are tab
;     separated.
; 2 = writes a trace formatted in (simple) HTML.
;xdebug.trace_format=0

; When set to '1' the trace files will be appended to, instead of being overwritten in subsequent requests.
;xdebug.trace_options=0

; The directory where the tracing files will be written to, make sure that the user who the PHP will be running as has
; write permissions to that directory.
;xdebug.trace_output_dir=/tmp

; This setting determines the name of the file that is used to dump traces into. The setting specifies the format with
; format specifiers, There are several format specifiers that can be used to format the file name.
; The '.xt' extension is always added automatically.
; 
; Possible format specifiers are:
; %c  = crc32 of working directory
; %p  = pid
; %r  = random number
; %s  = script name
; %t  = timestamp
; %u  = timestamp (microseconds)
; %H  = $_SERVER['HTTP_HOST']
; %R  = $_SERVER['REQUEST_URI']
; %U  = $_SERVER['UNIQUE_ID']
; %S  = session_id (from $_COOKIE if set)
; %%  = literal %
;xdebug.trace_output_name=trace.%c


; Controls the amount of array children and object's properties are shown when variables are displayed with either
; xdebug_var_dump(), xdebug.show_local_vars or through Function Traces.
; 
; To disable any limitation, use -1 as value.
; 
; This setting does not have any influence on the number of children that is send to the client through the
; Remote Debugging feature.
;xdebug.var_display_max_children=128

; Controls the maximum string length that is shown when variables are displayed with either xdebug_var_dump(),
; xdebug.show_local_vars or through Function Traces.
; 
; To disable any limitation, use -1 as value.
; 
; This setting does not have any influence on the number of children that is send to the client through the
; Remote Debugging feature.
;xdebug.var_display_max_data=512

; Controls how many nested levels of array elements and object properties are when variables are displayed with either
; xdebug_var_dump(), xdebug.show_local_vars or through Function Traces.
; 
; The maximum value you can select is 1023. You can also use -1 as value to select this maximum number.
; 
; This setting does not have any influence on the number of children that is send to the client through the
; Remote Debugging feature.
;xdebug.var_display_max_depth=3
